import os
from dotenv import load_dotenv
from typing import List
from pydantic import BaseModel, Field
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain_core.prompts import ChatPromptTemplate
from langchain_core.messages import HumanMessage, AIMessage
from langchain_core.output_parsers import PydanticOutputParser
from langchain.agents import create_tool_calling_agent, AgentExecutor
from tools import search_tool, save_workout_plan
from pathlib import Path

# Load the API key from the .env file
project_dir = Path(__file__).resolve().parent.parent
dotenv_path = project_dir / ".env"
load_dotenv(dotenv_path=dotenv_path)

# --- 1. Define the Structured Output (Pydantic Models) ---
# This tells the AI exactly how to format its response.

class Exercise(BaseModel):
    """Represents a single exercise in the workout plan."""
    name: str = Field(description="The specific name of the exercise")
    sets: int = Field(description="The number of sets to perform.")
    reps: str = Field(description="The target repetition range, e.g. 'until failure'.")
    rest_period: str = Field(description="The recommended rest time between sets in minute(s)/seconds.")

class WorkoutPlan(BaseModel):
    """The complete, structured workout plan generated by the AI trainer."""
    title: str = Field(description="A catchy or descriptive title for the workout plan, e.g., 'Foundational Strength'.")
    goal: str = Field(description="The primary fitness goal this plan is designed for, e.g., 'Build Muscle and Strength'.")
    workout_type: str = Field(description="The style of workout, e.g., 'Full Body', 'Push/Pull/Legs Split'.")
    exercises: List[Exercise] = Field(description="A list of all the exercises included in this workout plan.")
    final_note: str = Field(description="A brief, encouraging, and motivational tip for the user.")

# --- 2. Setup the "Brain" of the Agent ---

# Initialize the OpenAI model we want to use
llm = ChatGoogleGenerativeAI(model="gemini-1.5-flash-latest", temperature=0.7)

# The parser will help format the LLM's output according to our WorkoutPlan model
parser = PydanticOutputParser(pydantic_object=WorkoutPlan)

# This is the core prompt that defines the AI's persona, instructions, and goals.
prompt = ChatPromptTemplate.from_messages(
    [
        (
            "system",
            """
            You are 'Pulse,' a world-class AI personal trainer. Your purpose is to help users achieve their fitness goals
            by creating effective, safe, and personalized workout plans.

            Your guiding principles are:
            1.  **Be Encouraging & Knowledgeable:** Your tone should be motivating, supportive, and backed by fitness principles.
            2.  **Ask for Clarity:** If a user's request is vague (e.g., "give me a workout"), you MUST ask clarifying questions to understand their specific goals (e.g., muscle gain, fat loss), experience level, available equipment, and time commitment. Do not proceed until you have this information.
            3.  **Use Your Tools:** When you need more information about an exercise or want to save a plan, use the tools provided.
            4.  **Strictly Format Your Output:** When you have all the necessary information and are ready to provide the workout plan, you MUST format your response according to the provided JSON schema. Do not add any other conversational text or pleasantries outside of this final, structured output.
            \n{format_instructions}
            """,
        ),
        ("placeholder", "{chat_history}"),
        ("human", "{query}"),
        ("placeholder", "{agent_scratchpad}"),
    ]
).partial(format_instructions=parser.get_format_instructions())

# --- 3. Create and Run the Agent ---

# Define the list of tools the agent can use
tools = [search_tool, save_workout_plan]

# Create the agent by combining the LLM, the prompt, and the tools
agent = create_tool_calling_agent(
    llm=llm,
    prompt=prompt,
    tools=tools
)

# The executor is what runs the agent and makes it think step-by-step
agent_executor = AgentExecutor(agent=agent, tools=tools, verbose=True)

# --- 4. Interact with the AI ---

ready_answer = input("ü§ñ Hello! Welcome to Pulse ‚Äî your AI Personal Trainer, here to help you crush your fitness goals. Ready to get started? \n")

if ready_answer.lower() in ['n', 'no']:
    print("ü§ñ No problem! Come back whenever you're ready to crush your goals. Goodbye!")
    exit() # Exit the script if the user says no.

print("Before we can create your plan, let me collect some basic information from you.")

height = input("What is your height?: ")
weight = input("What is your weight?: ")
age = input("What is your age?: ")
ethnicity = input("What is your ethnicity?: ")

user_profile_summary = f"To start, here is my profile - Height: {height}, Weight: {weight}, Age: {age}, Ethnicity: {ethnicity}."

chat_history = [HumanMessage(content=user_profile_summary)]

print("\nGreat, thank you! Now, let's talk about your goals.")
print("üèãÔ∏è‚Äç‚ôÇÔ∏è Tell me ‚Äî what fitness goal(s) are you aiming for this year?\n")

# Start a loop for a continuous conversation
while True:
    query = input("You: ")
    if query.lower() in ["exit", "quit"]:
        print("üî• Great work today! Remember ‚Äî every rep, every choice brings you closer to the strongest version of yourself. See you next session! üí™")
        break

    # Invoke the agent with the user's query
    response = agent_executor.invoke({
        "query": query,
        "chat_history": chat_history
    })

    # Extract the AI's response text
    ai_response = response["output"]

    # Add the current turn to the chat history for context in the next turn
    chat_history.append(HumanMessage(content=query))
    chat_history.append(AIMessage(content=ai_response))

    # The agent's final answer is in the 'output' key.
    # We try to parse it using our Pydantic model.
    try:
        workout = parser.parse(response["output"])

        # If parsing is successful, we have a structured plan to display
        print("\nüèÜ Your Personalized Workout Plan is Ready!")
        print(f"üî• Focus: {workout.title}")
        print(f"üí™ Goal: {workout.goal} ({workout.workout_type})")

        print("\nüöÄ Let's Get Moving ‚Äî Here‚Äôs Your Game Plan:")
        for ex in workout.exercises:
            print(f"- {ex.name}: {ex.sets} sets of {ex.reps} reps, with {ex.rest_period} rest.")

        print("\n‚ú® Pulse's Note ‚ú®")
        print(workout.final_note)
        print("\n" + "-"*30 + "\n")

    except Exception:
        # If parsing fails, it means the AI is asking a clarifying question or just talking.
        # So, we print its response directly.
        print(f"ü§ñ Pulse: {response['output']}")
